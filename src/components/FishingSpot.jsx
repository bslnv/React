import React, { useState, useCallback } from 'react';
import FishingLog from './FishingLog'; 

const availableFishTypes = [
  { idPrefix: 'carp', name: '–ö–æ—Ä–æ–ø', size: '–°–µ—Ä–µ–¥–Ω—ñ–π', rarity: '–ó–≤–∏—á–∞–π–Ω–∞', imageUrl: 'https://placehold.co/100x80/FFD700/000000?text=Carp' },
  { idPrefix: 'pike', name: '–©—É–∫–∞', size: '–í–µ–ª–∏–∫–∞', rarity: '–†—ñ–¥–∫—ñ—Å–Ω–∞', imageUrl: 'https://placehold.co/100x80/90EE90/000000?text=Pike' },
  { idPrefix: 'perch', name: '–û–∫—É–Ω—å', size: '–ú–∞–ª–µ–Ω—å–∫–∏–π', rarity: '–ó–≤–∏—á–∞–π–Ω–∞', imageUrl: 'https://placehold.co/100x80/ADD8E6/000000?text=Perch' },
  { idPrefix: 'catfish', name: '–°–æ–º', size: '–î—É–∂–µ –≤–µ–ª–∏–∫–∏–π', rarity: '–ï–ø—ñ—á–Ω–∞', imageUrl: 'https://placehold.co/100x80/A9A9A9/FFFFFF?text=Catfish' },
  { idPrefix: 'sturgeon', name: '–û—Å–µ—Ç–µ—Ä', size: '–ì—ñ–≥–∞–Ω—Ç—Å—å–∫–∏–π', rarity: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞', imageUrl: 'https://placehold.co/100x80/D2B48C/FFFFFF?text=Sturgeon' },
];

let fishIdCounter = 0; 

function FishingSpot({ spotName, environmentDescription, maxLogCapacity = 5 }) { 
  const [caughtFishLog, setCaughtFishLog] = useState([]);
  const [statusMessage, setStatusMessage] = useState('–ì–æ—Ç–æ–≤—ñ –¥–æ —Ä–∏–±–æ–ª–æ–≤–ª—ñ!');

  const handleCatchFish = () => {
    if (caughtFishLog.length >= maxLogCapacity) {
      setStatusMessage(`–ñ—É—Ä–Ω–∞–ª –ø–æ–≤–Ω–∏–π! –ú–∞–∫—Å–∏–º—É–º ${maxLogCapacity} —Ä–∏–±.`);
      return;
    }

    const randomIndex = Math.floor(Math.random() * availableFishTypes.length);
    const caughtType = availableFishTypes[randomIndex];
    const newFish = {
      ...caughtType,
      id: `<span class="math-inline">\{caughtType\.idPrefix\}\_</span>{fishIdCounter++}`,
    };

    setCaughtFishLog(prevLog => [...prevLog, newFish]);
    setStatusMessage(`–°–ø—ñ–π–º–∞–Ω–æ: ${newFish.name}!`);
  };

  const handleClearFishById = useCallback((fishIdToRemove) => {
    setCaughtFishLog(prevLog => prevLog.filter(fish => fish.id !== fishIdToRemove));
    setStatusMessage(`–†–∏–±—É –∑ ID ${fishIdToRemove.substring(0,4)}... –≤–∏–ø—É—â–µ–Ω–æ.`);
  }, []); 

  const handleClearAllFish = useCallback(() => {
    setCaughtFishLog([]);
    setStatusMessage('–í–µ—Å—å —É–ª–æ–≤ –≤–∏–ø—É—â–µ–Ω–æ.');
  }, []);


  return (
    <div style={{ border: '2px dashed #2196F3', padding: '20px', margin: '20px auto', borderRadius: '8px', maxWidth: '700px', backgroundColor: '#e3f2fd' }}>
      <h2>–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ: {spotName}</h2>
      <p><em>{environmentDescription}</em></p>
      <p style={{fontWeight: 'bold'}}>–°—Ç–∞—Ç—É—Å: <span style={{color: caughtFishLog.length >= maxLogCapacity ? 'red' : 'green'}}>{statusMessage}</span></p>

      <button
        onClick={handleCatchFish}
        disabled={caughtFishLog.length >= maxLogCapacity}
        style={{ padding: '10px 15px', marginRight: '10px', backgroundColor: '#4CAF50', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}
      >
        –ó–∞–∫–∏–Ω—É—Ç–∏ –≤—É–¥–∫—É! üé£
      </button>
      <button
        onClick={handleClearAllFish}
        disabled={caughtFishLog.length === 0}
        style={{ padding: '10px 15px', backgroundColor: '#f44336', color: 'white', border: 'none', borderRadius: '4px', cursor: 'pointer' }}
      >
        –í–∏–ø—É—Å—Ç–∏—Ç–∏ –≤–µ—Å—å —É–ª–æ–≤ üóëÔ∏è
      </button>

      <FishingLog
        title={`–£–ª–æ–≤ –∑ "${spotName}" (–º–∞–∫—Å: ${maxLogCapacity})`}
        caughtFishes={caughtFishLog}
        onClearFish={handleClearFishById} 
      />
      <p>–ó–∞–ø–æ–≤–Ω–µ–Ω—ñ—Å—Ç—å –∂—É—Ä–Ω–∞–ª—É: {caughtFishLog.length} / {maxLogCapacity}</p>
    </div>
  );
}

export default FishingSpot;